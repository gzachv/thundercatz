|EqualizerLoopBack
LRCLK << codec_intf:iCODEC_intf.LRCLK
SCL << codec_intf:iCODEC_intf.SCLK
MCLK << codec_intf:iCODEC_intf.MCLK
RSTn << codec_intf:iCODEC_intf.RSTn
SDin << codec_intf:iCODEC_intf.SDin
SDout => SDout.IN1
RST_n => RST_n.IN1
clk => clk.IN3


|EqualizerLoopBack|reset_synch:irst_sync
rst_n <= FF2.DB_MAX_OUTPUT_PORT_TYPE
RST_n => FF2.ACLR
RST_n => FF1.ACLR
clk => FF2.CLK
clk => FF1.CLK


|EqualizerLoopBack|codec_intf:iCODEC_intf
clk => hold_rht[0].CLK
clk => hold_rht[1].CLK
clk => hold_rht[2].CLK
clk => hold_rht[3].CLK
clk => hold_rht[4].CLK
clk => hold_rht[5].CLK
clk => hold_rht[6].CLK
clk => hold_rht[7].CLK
clk => hold_rht[8].CLK
clk => hold_rht[9].CLK
clk => hold_rht[10].CLK
clk => hold_rht[11].CLK
clk => hold_rht[12].CLK
clk => hold_rht[13].CLK
clk => hold_rht[14].CLK
clk => hold_rht[15].CLK
clk => hold_lft[0].CLK
clk => hold_lft[1].CLK
clk => hold_lft[2].CLK
clk => hold_lft[3].CLK
clk => hold_lft[4].CLK
clk => hold_lft[5].CLK
clk => hold_lft[6].CLK
clk => hold_lft[7].CLK
clk => hold_lft[8].CLK
clk => hold_lft[9].CLK
clk => hold_lft[10].CLK
clk => hold_lft[11].CLK
clk => hold_lft[12].CLK
clk => hold_lft[13].CLK
clk => hold_lft[14].CLK
clk => hold_lft[15].CLK
clk => shift_in[0].CLK
clk => shift_in[1].CLK
clk => shift_in[2].CLK
clk => shift_in[3].CLK
clk => shift_in[4].CLK
clk => shift_in[5].CLK
clk => shift_in[6].CLK
clk => shift_in[7].CLK
clk => shift_in[8].CLK
clk => shift_in[9].CLK
clk => shift_in[10].CLK
clk => shift_in[11].CLK
clk => shift_in[12].CLK
clk => shift_in[13].CLK
clk => shift_in[14].CLK
clk => shift_in[15].CLK
clk => shift_out[0].CLK
clk => shift_out[1].CLK
clk => shift_out[2].CLK
clk => shift_out[3].CLK
clk => shift_out[4].CLK
clk => shift_out[5].CLK
clk => shift_out[6].CLK
clk => shift_out[7].CLK
clk => shift_out[8].CLK
clk => shift_out[9].CLK
clk => shift_out[10].CLK
clk => shift_out[11].CLK
clk => shift_out[12].CLK
clk => shift_out[13].CLK
clk => shift_out[14].CLK
clk => shift_out[15].CLK
clk => valid~reg0.CLK
clk => rht_buff[0].CLK
clk => rht_buff[1].CLK
clk => rht_buff[2].CLK
clk => rht_buff[3].CLK
clk => rht_buff[4].CLK
clk => rht_buff[5].CLK
clk => rht_buff[6].CLK
clk => rht_buff[7].CLK
clk => rht_buff[8].CLK
clk => rht_buff[9].CLK
clk => rht_buff[10].CLK
clk => rht_buff[11].CLK
clk => rht_buff[12].CLK
clk => rht_buff[13].CLK
clk => rht_buff[14].CLK
clk => rht_buff[15].CLK
clk => lft_buff[0].CLK
clk => lft_buff[1].CLK
clk => lft_buff[2].CLK
clk => lft_buff[3].CLK
clk => lft_buff[4].CLK
clk => lft_buff[5].CLK
clk => lft_buff[6].CLK
clk => lft_buff[7].CLK
clk => lft_buff[8].CLK
clk => lft_buff[9].CLK
clk => lft_buff[10].CLK
clk => lft_buff[11].CLK
clk => lft_buff[12].CLK
clk => lft_buff[13].CLK
clk => lft_buff[14].CLK
clk => lft_buff[15].CLK
clk => RSTn~reg0.CLK
clk => lrclk_cnt[0].CLK
clk => lrclk_cnt[1].CLK
clk => lrclk_cnt[2].CLK
clk => lrclk_cnt[3].CLK
clk => lrclk_cnt[4].CLK
clk => lrclk_cnt[5].CLK
clk => lrclk_cnt[6].CLK
clk => lrclk_cnt[7].CLK
clk => lrclk_cnt[8].CLK
clk => lrclk_cnt[9].CLK
clk => state.CLK
rst_n => nxt_state.OUTPUTSELECT
rst_n => nxt_state.DATAA
rst_n => shift_out[0].ACLR
rst_n => shift_out[1].ACLR
rst_n => shift_out[2].ACLR
rst_n => shift_out[3].ACLR
rst_n => shift_out[4].ACLR
rst_n => shift_out[5].ACLR
rst_n => shift_out[6].ACLR
rst_n => shift_out[7].ACLR
rst_n => shift_out[8].ACLR
rst_n => shift_out[9].ACLR
rst_n => shift_out[10].ACLR
rst_n => shift_out[11].ACLR
rst_n => shift_out[12].ACLR
rst_n => shift_out[13].ACLR
rst_n => shift_out[14].ACLR
rst_n => shift_out[15].ACLR
rst_n => lrclk_cnt[0].ACLR
rst_n => lrclk_cnt[1].ACLR
rst_n => lrclk_cnt[2].ACLR
rst_n => lrclk_cnt[3].ACLR
rst_n => lrclk_cnt[4].ACLR
rst_n => lrclk_cnt[5].ACLR
rst_n => lrclk_cnt[6].ACLR
rst_n => lrclk_cnt[7].ACLR
rst_n => lrclk_cnt[8].ACLR
rst_n => lrclk_cnt[9].PRESET
rst_n => RSTn~reg0.ACLR
rst_n => valid~reg0.ACLR
rst_n => hold_lft[0].ACLR
rst_n => hold_lft[1].ACLR
rst_n => hold_lft[2].ACLR
rst_n => hold_lft[3].ACLR
rst_n => hold_lft[4].ACLR
rst_n => hold_lft[5].ACLR
rst_n => hold_lft[6].ACLR
rst_n => hold_lft[7].ACLR
rst_n => hold_lft[8].ACLR
rst_n => hold_lft[9].ACLR
rst_n => hold_lft[10].ACLR
rst_n => hold_lft[11].ACLR
rst_n => hold_lft[12].ACLR
rst_n => hold_lft[13].ACLR
rst_n => hold_lft[14].ACLR
rst_n => hold_lft[15].ACLR
rst_n => hold_rht[0].ACLR
rst_n => hold_rht[1].ACLR
rst_n => hold_rht[2].ACLR
rst_n => hold_rht[3].ACLR
rst_n => hold_rht[4].ACLR
rst_n => hold_rht[5].ACLR
rst_n => hold_rht[6].ACLR
rst_n => hold_rht[7].ACLR
rst_n => hold_rht[8].ACLR
rst_n => hold_rht[9].ACLR
rst_n => hold_rht[10].ACLR
rst_n => hold_rht[11].ACLR
rst_n => hold_rht[12].ACLR
rst_n => hold_rht[13].ACLR
rst_n => hold_rht[14].ACLR
rst_n => hold_rht[15].ACLR
rst_n => state.ACLR
rst_n => lft_buff[0].ACLR
rst_n => lft_buff[1].ACLR
rst_n => lft_buff[2].ACLR
rst_n => lft_buff[3].ACLR
rst_n => lft_buff[4].ACLR
rst_n => lft_buff[5].ACLR
rst_n => lft_buff[6].ACLR
rst_n => lft_buff[7].ACLR
rst_n => lft_buff[8].ACLR
rst_n => lft_buff[9].ACLR
rst_n => lft_buff[10].ACLR
rst_n => lft_buff[11].ACLR
rst_n => lft_buff[12].ACLR
rst_n => lft_buff[13].ACLR
rst_n => lft_buff[14].ACLR
rst_n => lft_buff[15].ACLR
rst_n => rht_buff[0].ACLR
rst_n => rht_buff[1].ACLR
rst_n => rht_buff[2].ACLR
rst_n => rht_buff[3].ACLR
rst_n => rht_buff[4].ACLR
rst_n => rht_buff[5].ACLR
rst_n => rht_buff[6].ACLR
rst_n => rht_buff[7].ACLR
rst_n => rht_buff[8].ACLR
rst_n => rht_buff[9].ACLR
rst_n => rht_buff[10].ACLR
rst_n => rht_buff[11].ACLR
rst_n => rht_buff[12].ACLR
rst_n => rht_buff[13].ACLR
rst_n => rht_buff[14].ACLR
rst_n => rht_buff[15].ACLR
rst_n => shift_in[0].ACLR
rst_n => shift_in[1].ACLR
rst_n => shift_in[2].ACLR
rst_n => shift_in[3].ACLR
rst_n => shift_in[4].ACLR
rst_n => shift_in[5].ACLR
rst_n => shift_in[6].ACLR
rst_n => shift_in[7].ACLR
rst_n => shift_in[8].ACLR
rst_n => shift_in[9].ACLR
rst_n => shift_in[10].ACLR
rst_n => shift_in[11].ACLR
rst_n => shift_in[12].ACLR
rst_n => shift_in[13].ACLR
rst_n => shift_in[14].ACLR
rst_n => shift_in[15].ACLR
LRCLK <= lrclk_cnt[9].DB_MAX_OUTPUT_PORT_TYPE
SCLK <= lrclk_cnt[4].DB_MAX_OUTPUT_PORT_TYPE
MCLK <= lrclk_cnt[1].DB_MAX_OUTPUT_PORT_TYPE
RSTn <= RSTn~reg0.DB_MAX_OUTPUT_PORT_TYPE
SDout => shift_in[0].DATAIN
SDin <= shift_out[15].DB_MAX_OUTPUT_PORT_TYPE
valid <= valid~reg0.DB_MAX_OUTPUT_PORT_TYPE
lft_in[0] <= hold_lft[0].DB_MAX_OUTPUT_PORT_TYPE
lft_in[1] <= hold_lft[1].DB_MAX_OUTPUT_PORT_TYPE
lft_in[2] <= hold_lft[2].DB_MAX_OUTPUT_PORT_TYPE
lft_in[3] <= hold_lft[3].DB_MAX_OUTPUT_PORT_TYPE
lft_in[4] <= hold_lft[4].DB_MAX_OUTPUT_PORT_TYPE
lft_in[5] <= hold_lft[5].DB_MAX_OUTPUT_PORT_TYPE
lft_in[6] <= hold_lft[6].DB_MAX_OUTPUT_PORT_TYPE
lft_in[7] <= hold_lft[7].DB_MAX_OUTPUT_PORT_TYPE
lft_in[8] <= hold_lft[8].DB_MAX_OUTPUT_PORT_TYPE
lft_in[9] <= hold_lft[9].DB_MAX_OUTPUT_PORT_TYPE
lft_in[10] <= hold_lft[10].DB_MAX_OUTPUT_PORT_TYPE
lft_in[11] <= hold_lft[11].DB_MAX_OUTPUT_PORT_TYPE
lft_in[12] <= hold_lft[12].DB_MAX_OUTPUT_PORT_TYPE
lft_in[13] <= hold_lft[13].DB_MAX_OUTPUT_PORT_TYPE
lft_in[14] <= hold_lft[14].DB_MAX_OUTPUT_PORT_TYPE
lft_in[15] <= hold_lft[15].DB_MAX_OUTPUT_PORT_TYPE
rht_in[0] <= hold_rht[0].DB_MAX_OUTPUT_PORT_TYPE
rht_in[1] <= hold_rht[1].DB_MAX_OUTPUT_PORT_TYPE
rht_in[2] <= hold_rht[2].DB_MAX_OUTPUT_PORT_TYPE
rht_in[3] <= hold_rht[3].DB_MAX_OUTPUT_PORT_TYPE
rht_in[4] <= hold_rht[4].DB_MAX_OUTPUT_PORT_TYPE
rht_in[5] <= hold_rht[5].DB_MAX_OUTPUT_PORT_TYPE
rht_in[6] <= hold_rht[6].DB_MAX_OUTPUT_PORT_TYPE
rht_in[7] <= hold_rht[7].DB_MAX_OUTPUT_PORT_TYPE
rht_in[8] <= hold_rht[8].DB_MAX_OUTPUT_PORT_TYPE
rht_in[9] <= hold_rht[9].DB_MAX_OUTPUT_PORT_TYPE
rht_in[10] <= hold_rht[10].DB_MAX_OUTPUT_PORT_TYPE
rht_in[11] <= hold_rht[11].DB_MAX_OUTPUT_PORT_TYPE
rht_in[12] <= hold_rht[12].DB_MAX_OUTPUT_PORT_TYPE
rht_in[13] <= hold_rht[13].DB_MAX_OUTPUT_PORT_TYPE
rht_in[14] <= hold_rht[14].DB_MAX_OUTPUT_PORT_TYPE
rht_in[15] <= hold_rht[15].DB_MAX_OUTPUT_PORT_TYPE
lft_out[0] => lft_buff[0].DATAIN
lft_out[1] => lft_buff[1].DATAIN
lft_out[2] => lft_buff[2].DATAIN
lft_out[3] => lft_buff[3].DATAIN
lft_out[4] => lft_buff[4].DATAIN
lft_out[5] => lft_buff[5].DATAIN
lft_out[6] => lft_buff[6].DATAIN
lft_out[7] => lft_buff[7].DATAIN
lft_out[8] => lft_buff[8].DATAIN
lft_out[9] => lft_buff[9].DATAIN
lft_out[10] => lft_buff[10].DATAIN
lft_out[11] => lft_buff[11].DATAIN
lft_out[12] => lft_buff[12].DATAIN
lft_out[13] => lft_buff[13].DATAIN
lft_out[14] => lft_buff[14].DATAIN
lft_out[15] => lft_buff[15].DATAIN
rht_out[0] => rht_buff[0].DATAIN
rht_out[1] => rht_buff[1].DATAIN
rht_out[2] => rht_buff[2].DATAIN
rht_out[3] => rht_buff[3].DATAIN
rht_out[4] => rht_buff[4].DATAIN
rht_out[5] => rht_buff[5].DATAIN
rht_out[6] => rht_buff[6].DATAIN
rht_out[7] => rht_buff[7].DATAIN
rht_out[8] => rht_buff[8].DATAIN
rht_out[9] => rht_buff[9].DATAIN
rht_out[10] => rht_buff[10].DATAIN
rht_out[11] => rht_buff[11].DATAIN
rht_out[12] => rht_buff[12].DATAIN
rht_out[13] => rht_buff[13].DATAIN
rht_out[14] => rht_buff[14].DATAIN
rht_out[15] => rht_buff[15].DATAIN


|EqualizerLoopBack|posedgeDetect:iedgeDet
sig_posedge <= sig_posedge.DB_MAX_OUTPUT_PORT_TYPE
sig => FF1.DATAIN
clk => FF3.CLK
clk => FF2.CLK
clk => FF1.CLK


